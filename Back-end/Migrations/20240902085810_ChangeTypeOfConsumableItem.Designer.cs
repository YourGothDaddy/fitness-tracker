// <auto-generated />
using System;
using Fitness_Tracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fitness_Tracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240902085810_ChangeTypeOfConsumableItem")]
    partial class ChangeTypeOfConsumableItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.AminoAcidInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Alanine")
                        .HasColumnType("float");

                    b.Property<double>("Arginine")
                        .HasColumnType("float");

                    b.Property<double>("AsparticAcid")
                        .HasColumnType("float");

                    b.Property<double>("Cystine")
                        .HasColumnType("float");

                    b.Property<double>("Glutamine")
                        .HasColumnType("float");

                    b.Property<double>("Glycine")
                        .HasColumnType("float");

                    b.Property<double>("Histidine")
                        .HasColumnType("float");

                    b.Property<double>("Hydroxyproline")
                        .HasColumnType("float");

                    b.Property<double>("Isoleucine")
                        .HasColumnType("float");

                    b.Property<double>("Leucine")
                        .HasColumnType("float");

                    b.Property<double>("Lysine")
                        .HasColumnType("float");

                    b.Property<double>("Methionine")
                        .HasColumnType("float");

                    b.Property<int>("NutritionalInfoId")
                        .HasColumnType("int");

                    b.Property<double>("Phenylalanine")
                        .HasColumnType("float");

                    b.Property<double>("Proline")
                        .HasColumnType("float");

                    b.Property<double>("Serine")
                        .HasColumnType("float");

                    b.Property<double>("Threonine")
                        .HasColumnType("float");

                    b.Property<double>("Tryptophan")
                        .HasColumnType("float");

                    b.Property<double>("Tyrosine")
                        .HasColumnType("float");

                    b.Property<double>("Valine")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalInfoId")
                        .IsUnique();

                    b.ToTable("AminoAcidInfos");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.CarbohydrateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Fibers")
                        .HasColumnType("float");

                    b.Property<double>("Fructose")
                        .HasColumnType("float");

                    b.Property<double>("Galactose")
                        .HasColumnType("float");

                    b.Property<double>("Glucose")
                        .HasColumnType("float");

                    b.Property<double>("Lactose")
                        .HasColumnType("float");

                    b.Property<double>("Maltose")
                        .HasColumnType("float");

                    b.Property<int>("NutritionalInfoId")
                        .HasColumnType("int");

                    b.Property<double>("Starch")
                        .HasColumnType("float");

                    b.Property<double>("Sucrose")
                        .HasColumnType("float");

                    b.Property<double>("Sugars")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalInfoId")
                        .IsUnique();

                    b.ToTable("CarbohydrateInfos");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.ConsumableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaloriesPer100g")
                        .HasColumnType("int");

                    b.Property<double>("CarbohydratePer100g")
                        .HasColumnType("float");

                    b.Property<double>("FatPer100g")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NutritionalInformationId")
                        .HasColumnType("int");

                    b.Property<double>("ProteinPer100g")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalInformationId")
                        .IsUnique();

                    b.ToTable("ConsumableItems");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.FatInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MonounsaturatedFats")
                        .HasColumnType("float");

                    b.Property<int>("NutritionalInfoId")
                        .HasColumnType("int");

                    b.Property<double>("PolyunsaturatedFats")
                        .HasColumnType("float");

                    b.Property<double>("SaturatedFats")
                        .HasColumnType("float");

                    b.Property<double>("TotalFats")
                        .HasColumnType("float");

                    b.Property<double>("TransFats")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalInfoId")
                        .IsUnique();

                    b.ToTable("FatInfos");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.MineralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BetaSitosterol")
                        .HasColumnType("float");

                    b.Property<double>("Calcium")
                        .HasColumnType("float");

                    b.Property<double>("Campesterol")
                        .HasColumnType("float");

                    b.Property<double>("Cholesterol")
                        .HasColumnType("float");

                    b.Property<double>("Copper")
                        .HasColumnType("float");

                    b.Property<double>("Fluoride")
                        .HasColumnType("float");

                    b.Property<double>("Iron")
                        .HasColumnType("float");

                    b.Property<double>("Magnesium")
                        .HasColumnType("float");

                    b.Property<double>("Manganese")
                        .HasColumnType("float");

                    b.Property<int>("NutritionalInfoId")
                        .HasColumnType("int");

                    b.Property<double>("Phosphorus")
                        .HasColumnType("float");

                    b.Property<double>("Phytosterols")
                        .HasColumnType("float");

                    b.Property<double>("Potassium")
                        .HasColumnType("float");

                    b.Property<double>("Selenium")
                        .HasColumnType("float");

                    b.Property<double>("Sodium")
                        .HasColumnType("float");

                    b.Property<double>("Sterols")
                        .HasColumnType("float");

                    b.Property<double>("Stigmasterol")
                        .HasColumnType("float");

                    b.Property<double>("Zinc")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalInfoId")
                        .IsUnique();

                    b.ToTable("MineralInfos");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.MoreInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Alcohol")
                        .HasColumnType("float");

                    b.Property<double>("Ashes")
                        .HasColumnType("float");

                    b.Property<double>("Caffeine")
                        .HasColumnType("float");

                    b.Property<int>("NutritionalInfoId")
                        .HasColumnType("int");

                    b.Property<double>("Theobromine")
                        .HasColumnType("float");

                    b.Property<double>("Water")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalInfoId")
                        .IsUnique();

                    b.ToTable("MoreInfos");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsumableItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NutritionalInfos");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.VitaminInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Betaine")
                        .HasColumnType("float");

                    b.Property<int>("NutritionalInfoId")
                        .HasColumnType("int");

                    b.Property<double>("VitaminA")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB1")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB12")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB2")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB3")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB4")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB5")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB6")
                        .HasColumnType("float");

                    b.Property<double>("VitaminB9")
                        .HasColumnType("float");

                    b.Property<double>("VitaminC")
                        .HasColumnType("float");

                    b.Property<double>("VitaminD")
                        .HasColumnType("float");

                    b.Property<double>("VitaminE")
                        .HasColumnType("float");

                    b.Property<double>("VitaminK1")
                        .HasColumnType("float");

                    b.Property<double>("VitaminK2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NutritionalInfoId")
                        .IsUnique();

                    b.ToTable("VitaminInfos");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MealOfTheDay")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyCaloriesGoal")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<float>("GoalWeight")
                        .HasColumnType("real");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsDailyCaloriesGoal")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MonthlyCaloriesGoal")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.AminoAcidInfo", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", "NutritionalInfo")
                        .WithOne("AminoAcids")
                        .HasForeignKey("Fitness_Tracker.Data.Models.Consumables.AminoAcidInfo", "NutritionalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalInfo");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.CarbohydrateInfo", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", "NutritionalInfo")
                        .WithOne("Carbohydrates")
                        .HasForeignKey("Fitness_Tracker.Data.Models.Consumables.CarbohydrateInfo", "NutritionalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalInfo");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.ConsumableItem", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", "NutritionalInformation")
                        .WithOne("ConsumableItem")
                        .HasForeignKey("Fitness_Tracker.Data.Models.Consumables.ConsumableItem", "NutritionalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalInformation");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.FatInfo", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", "NutritionalInfo")
                        .WithOne("Fats")
                        .HasForeignKey("Fitness_Tracker.Data.Models.Consumables.FatInfo", "NutritionalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalInfo");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.MineralInfo", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", "NutritionalInfo")
                        .WithOne("Minerals")
                        .HasForeignKey("Fitness_Tracker.Data.Models.Consumables.MineralInfo", "NutritionalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalInfo");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.MoreInfo", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", "NutritionalInfo")
                        .WithOne("More")
                        .HasForeignKey("Fitness_Tracker.Data.Models.Consumables.MoreInfo", "NutritionalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalInfo");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.VitaminInfo", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", "NutritionalInfo")
                        .WithOne("Vitamins")
                        .HasForeignKey("Fitness_Tracker.Data.Models.Consumables.VitaminInfo", "NutritionalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NutritionalInfo");
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Meal", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.User", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness_Tracker.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fitness_Tracker.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.Consumables.NutritionalInfo", b =>
                {
                    b.Navigation("AminoAcids")
                        .IsRequired();

                    b.Navigation("Carbohydrates")
                        .IsRequired();

                    b.Navigation("ConsumableItem")
                        .IsRequired();

                    b.Navigation("Fats")
                        .IsRequired();

                    b.Navigation("Minerals")
                        .IsRequired();

                    b.Navigation("More")
                        .IsRequired();

                    b.Navigation("Vitamins")
                        .IsRequired();
                });

            modelBuilder.Entity("Fitness_Tracker.Data.Models.User", b =>
                {
                    b.Navigation("Meals");
                });
#pragma warning restore 612, 618
        }
    }
}
