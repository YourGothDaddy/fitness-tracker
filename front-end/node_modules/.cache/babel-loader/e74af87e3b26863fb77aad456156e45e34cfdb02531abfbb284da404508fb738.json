{"ast":null,"code":"var _jsxFileName = \"C:\\\\Alexander\\\\Software Developement\\\\repos\\\\Web2\\\\Fitness-Tracker\\\\front-end\\\\src\\\\Contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const [userInfo, setUserInfo] = useState(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch(\"https://localhost:7009/api/user/authstatus\", {\n        method: \"GET\",\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        throw new Error(\"User is not authenticated\");\n      }\n      const user = await response.json();\n      setIsAuthenticated(true);\n      setUserInfo(user);\n      if (user.roles && user.roles.includes(\"Administrator\")) {\n        setIsAdmin(true);\n      } else {\n        setIsAdmin(false);\n      }\n    } catch (err) {\n      setIsAuthenticated(false);\n      setUserInfo(null);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(\"https://localhost:7009/api/user/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          Email: email,\n          Password: password\n        }),\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Login failed\");\n      }\n      await checkAuthStatus();\n    } catch (err) {\n      setIsAuthenticated(false);\n      setUserInfo(null);\n    }\n  };\n  const logout = async () => {\n    try {\n      await fetch(\"https://localhost:7009/api/user/logout\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n      setIsAuthenticated(false);\n      setUserInfo(null);\n    } catch (err) {\n      console.error(\"Logout failed:\", err.message);\n    }\n  };\n  const authContextValue = {\n    isAuthenticated,\n    userInfo,\n    isAdmin,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"iWy0IuXfw6zyPbsOzMc2tCU6hEo=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userInfo","setUserInfo","isAdmin","setIsAdmin","checkAuthStatus","response","fetch","method","credentials","ok","Error","user","json","roles","includes","err","login","email","password","headers","body","JSON","stringify","Email","Password","logout","console","error","message","authContextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/src/Contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://localhost:7009/api/user/authstatus\",\r\n        {\r\n          method: \"GET\",\r\n          credentials: \"include\",\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"User is not authenticated\");\r\n      }\r\n\r\n      const user = await response.json();\r\n      setIsAuthenticated(true);\r\n      setUserInfo(user);\r\n\r\n      if (user.roles && user.roles.includes(\"Administrator\")) {\r\n        setIsAdmin(true);\r\n      } else {\r\n        setIsAdmin(false);\r\n      }\r\n    } catch (err) {\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch(\"https://localhost:7009/api/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ Email: email, Password: password }),\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Login failed\");\r\n      }\r\n\r\n      await checkAuthStatus();\r\n    } catch (err) {\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await fetch(\"https://localhost:7009/api/user/logout\", {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n      });\r\n\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    } catch (err) {\r\n      console.error(\"Logout failed:\", err.message);\r\n    }\r\n  };\r\n\r\n  const authContextValue = {\r\n    isAuthenticated,\r\n    userInfo,\r\n    isAdmin,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}