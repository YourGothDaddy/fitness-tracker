{"ast":null,"code":"import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\r\n * Build SVG visual attrbutes, like cx and style.transform\r\n */\nfunction buildSVGAttrs(state, {\n  attrX,\n  attrY,\n  attrScale,\n  originX,\n  originY,\n  pathLength,\n  pathSpacing = 1,\n  pathOffset = 0,\n  // This is object creation, which we try to avoid per-frame.\n  ...latest\n}, isSVGTag, transformTemplate) {\n  buildHTMLStyles(state, latest, transformTemplate);\n  /**\r\n   * For svg tags we just want to make sure viewBox is animatable and treat all the styles\r\n   * as normal HTML tags.\r\n   */\n  if (isSVGTag) {\n    if (state.style.viewBox) {\n      state.attrs.viewBox = state.style.viewBox;\n    }\n    return;\n  }\n  state.attrs = state.style;\n  state.style = {};\n  const {\n    attrs,\n    style,\n    dimensions\n  } = state;\n  /**\r\n   * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\r\n   * and copy it into style.\r\n   */\n  if (attrs.transform) {\n    if (dimensions) style.transform = attrs.transform;\n    delete attrs.transform;\n  }\n  // Parse transformOrigin\n  if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n  }\n  // Render attrX/attrY/attrScale as attributes\n  if (attrX !== undefined) attrs.x = attrX;\n  if (attrY !== undefined) attrs.y = attrY;\n  if (attrScale !== undefined) attrs.scale = attrScale;\n  // Build SVG path if one has been defined\n  if (pathLength !== undefined) {\n    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n  }\n}\nexport { buildSVGAttrs };","map":{"version":3,"names":["buildHTMLStyles","calcSVGTransformOrigin","buildSVGPath","buildSVGAttrs","state","attrX","attrY","attrScale","originX","originY","pathLength","pathSpacing","pathOffset","latest","isSVGTag","transformTemplate","style","viewBox","attrs","dimensions","transform","undefined","transformOrigin","x","y","scale"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"sourcesContent":["import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\r\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\r\nimport { buildSVGPath } from './path.mjs';\r\n\r\n/**\r\n * Build SVG visual attrbutes, like cx and style.transform\r\n */\r\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \r\n// This is object creation, which we try to avoid per-frame.\r\n...latest }, isSVGTag, transformTemplate) {\r\n    buildHTMLStyles(state, latest, transformTemplate);\r\n    /**\r\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\r\n     * as normal HTML tags.\r\n     */\r\n    if (isSVGTag) {\r\n        if (state.style.viewBox) {\r\n            state.attrs.viewBox = state.style.viewBox;\r\n        }\r\n        return;\r\n    }\r\n    state.attrs = state.style;\r\n    state.style = {};\r\n    const { attrs, style, dimensions } = state;\r\n    /**\r\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\r\n     * and copy it into style.\r\n     */\r\n    if (attrs.transform) {\r\n        if (dimensions)\r\n            style.transform = attrs.transform;\r\n        delete attrs.transform;\r\n    }\r\n    // Parse transformOrigin\r\n    if (dimensions &&\r\n        (originX !== undefined || originY !== undefined || style.transform)) {\r\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\r\n    }\r\n    // Render attrX/attrY/attrScale as attributes\r\n    if (attrX !== undefined)\r\n        attrs.x = attrX;\r\n    if (attrY !== undefined)\r\n        attrs.y = attrY;\r\n    if (attrScale !== undefined)\r\n        attrs.scale = attrScale;\r\n    // Build SVG path if one has been defined\r\n    if (pathLength !== undefined) {\r\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\r\n    }\r\n}\r\n\r\nexport { buildSVGAttrs };\r\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,mCAAmC;AACnE,SAASC,sBAAsB,QAAQ,wBAAwB;AAC/D,SAASC,YAAY,QAAQ,YAAY;;AAEzC;AACA;AACA;AACA,SAASC,aAAaA,CAACC,KAAK,EAAE;EAAEC,KAAK;EAAEC,KAAK;EAAEC,SAAS;EAAEC,OAAO;EAAEC,OAAO;EAAEC,UAAU;EAAEC,WAAW,GAAG,CAAC;EAAEC,UAAU,GAAG,CAAC;EACtH;EACA,GAAGC;AAAO,CAAC,EAAEC,QAAQ,EAAEC,iBAAiB,EAAE;EACtCf,eAAe,CAACI,KAAK,EAAES,MAAM,EAAEE,iBAAiB,CAAC;EACjD;AACJ;AACA;AACA;EACI,IAAID,QAAQ,EAAE;IACV,IAAIV,KAAK,CAACY,KAAK,CAACC,OAAO,EAAE;MACrBb,KAAK,CAACc,KAAK,CAACD,OAAO,GAAGb,KAAK,CAACY,KAAK,CAACC,OAAO;IAC7C;IACA;EACJ;EACAb,KAAK,CAACc,KAAK,GAAGd,KAAK,CAACY,KAAK;EACzBZ,KAAK,CAACY,KAAK,GAAG,CAAC,CAAC;EAChB,MAAM;IAAEE,KAAK;IAAEF,KAAK;IAAEG;EAAW,CAAC,GAAGf,KAAK;EAC1C;AACJ;AACA;AACA;EACI,IAAIc,KAAK,CAACE,SAAS,EAAE;IACjB,IAAID,UAAU,EACVH,KAAK,CAACI,SAAS,GAAGF,KAAK,CAACE,SAAS;IACrC,OAAOF,KAAK,CAACE,SAAS;EAC1B;EACA;EACA,IAAID,UAAU,KACTX,OAAO,KAAKa,SAAS,IAAIZ,OAAO,KAAKY,SAAS,IAAIL,KAAK,CAACI,SAAS,CAAC,EAAE;IACrEJ,KAAK,CAACM,eAAe,GAAGrB,sBAAsB,CAACkB,UAAU,EAAEX,OAAO,KAAKa,SAAS,GAAGb,OAAO,GAAG,GAAG,EAAEC,OAAO,KAAKY,SAAS,GAAGZ,OAAO,GAAG,GAAG,CAAC;EAC5I;EACA;EACA,IAAIJ,KAAK,KAAKgB,SAAS,EACnBH,KAAK,CAACK,CAAC,GAAGlB,KAAK;EACnB,IAAIC,KAAK,KAAKe,SAAS,EACnBH,KAAK,CAACM,CAAC,GAAGlB,KAAK;EACnB,IAAIC,SAAS,KAAKc,SAAS,EACvBH,KAAK,CAACO,KAAK,GAAGlB,SAAS;EAC3B;EACA,IAAIG,UAAU,KAAKW,SAAS,EAAE;IAC1BnB,YAAY,CAACgB,KAAK,EAAER,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAE,KAAK,CAAC;EACnE;AACJ;AAEA,SAAST,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}