{"ast":null,"code":"var _jsxFileName = \"C:\\\\Alexander\\\\Software Developement\\\\repos\\\\Web2\\\\Fitness-Tracker\\\\front-end\\\\src\\\\components\\\\Pages\\\\AllMealsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllMealsPage = () => {\n  _s();\n  const [meals, setMeals] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    const fetchMeals = async () => {\n      try {\n        const response = await fetch('https://localhost:7009/api/meal/all', {\n          method: 'POST',\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Displaying meals failed');\n        }\n        const data = await response.json();\n        setMeals(data); // Assuming the response is an array of meals\n        setErrorMessage('');\n      } catch (err) {\n        setErrorMessage(err.message);\n      }\n    };\n    fetchMeals();\n  }, []); // Empty dependency array ensures this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Meal Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Meal of the Day\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Calories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: meals.map(meal => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: meal.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: MealOfTheDayLabel(meal.mealOfTheDay)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: meal.calories\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)]\n        }, meal.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n// Helper function to convert mealOfTheDay enum to a readable label\n_s(AllMealsPage, \"SPrbT1RX8R4k8DEMJk4thTev0RI=\");\n_c = AllMealsPage;\nconst MealOfTheDayLabel = mealOfTheDay => {\n  switch (mealOfTheDay) {\n    case 0:\n      return 'Breakfast';\n    case 1:\n      return 'Lunch';\n    case 2:\n      return 'Dinner';\n    case 3:\n      return 'Snack';\n    default:\n      return 'Unknown';\n  }\n};\n_c2 = MealOfTheDayLabel;\nexport default AllMealsPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"AllMealsPage\");\n$RefreshReg$(_c2, \"MealOfTheDayLabel\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","AllMealsPage","_s","meals","setMeals","errorMessage","setErrorMessage","fetchMeals","response","fetch","method","credentials","ok","Error","data","json","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","meal","name","MealOfTheDayLabel","mealOfTheDay","calories","id","_c","_c2","$RefreshReg$"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/src/components/Pages/AllMealsPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst AllMealsPage = () => {\r\n    const [meals, setMeals] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchMeals = async () => {\r\n            try {\r\n                const response = await fetch('https://localhost:7009/api/meal/all', {\r\n                    method: 'POST',\r\n                    credentials: 'include',\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Displaying meals failed');\r\n                }\r\n\r\n                const data = await response.json();\r\n                setMeals(data); // Assuming the response is an array of meals\r\n                setErrorMessage('');\r\n            } catch (err) {\r\n                setErrorMessage(err.message);\r\n            }\r\n        };\r\n\r\n        fetchMeals();\r\n    }, []); // Empty dependency array ensures this runs once when the component mounts\r\n\r\n    return (\r\n        <div>\r\n            {errorMessage && <p>{errorMessage}</p>}\r\n\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Meal Name</th>\r\n                        <th>Meal of the Day</th>\r\n                        <th>Calories</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {meals.map((meal) => (\r\n                        <tr key={meal.id}>\r\n                            <td>{meal.name}</td>\r\n                            <td>{MealOfTheDayLabel(meal.mealOfTheDay)}</td>\r\n                            <td>{meal.calories}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Helper function to convert mealOfTheDay enum to a readable label\r\nconst MealOfTheDayLabel = (mealOfTheDay) => {\r\n    switch (mealOfTheDay) {\r\n        case 0:\r\n            return 'Breakfast';\r\n        case 1:\r\n            return 'Lunch';\r\n        case 2:\r\n            return 'Dinner';\r\n        case 3:\r\n            return 'Snack';\r\n        default:\r\n            return 'Unknown';\r\n    }\r\n};\r\n\r\nexport default AllMealsPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}