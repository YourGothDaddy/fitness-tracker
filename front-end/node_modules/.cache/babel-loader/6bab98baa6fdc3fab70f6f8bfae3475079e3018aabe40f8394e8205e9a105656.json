{"ast":null,"code":"var _jsxFileName = \"C:\\\\Alexander\\\\Software Developement\\\\repos\\\\Web2\\\\Fitness-Tracker\\\\front-end\\\\src\\\\Contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create a Provider component\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userInfo, setUserInfo] = useState(null);\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('https://localhost:7009/api/user/authstatus', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${yourJwtToken}` // Replace with the token if not using cookies\n        },\n        credentials: 'include' // Include credentials if the token is stored in cookies\n      });\n      if (!response.ok) {\n        throw new Error('User is not authenticated');\n      }\n      console.log(\"Logged in?\");\n      const user = await response.json();\n      setIsAuthenticated(true);\n      setUserInfo(user);\n    } catch (err) {\n      console.log(err.message);\n      setIsAuthenticated(false);\n      setUserInfo(null);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('https://localhost:7009/api/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      await checkAuthStatus(); // Refresh the auth status after login\n    } catch (err) {\n      console.log(err.message);\n      setIsAuthenticated(false);\n      setUserInfo(null);\n    }\n  };\n  const logout = async () => {\n    try {\n      await fetch('https://localhost:7009/api/user/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      setIsAuthenticated(false);\n      setUserInfo(null);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userInfo,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gEfKW0dEUPVPRDbiG27Os62oZmI=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userInfo","setUserInfo","checkAuthStatus","response","fetch","method","headers","yourJwtToken","credentials","ok","Error","console","log","user","json","err","message","login","email","password","body","JSON","stringify","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/src/Contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create the Auth Context\r\nexport const AuthContext = createContext();\r\n\r\n// Create a Provider component\r\nconst AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userInfo, setUserInfo] = useState(null);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const response = await fetch('https://localhost:7009/api/user/authstatus', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${yourJwtToken}`, // Replace with the token if not using cookies\r\n        },\r\n        credentials: 'include' // Include credentials if the token is stored in cookies\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('User is not authenticated');\r\n      }\r\n\r\n      console.log(\"Logged in?\");\r\n      const user = await response.json();\r\n      setIsAuthenticated(true);\r\n      setUserInfo(user);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch('https://localhost:7009/api/user/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n        credentials: 'include',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Login failed');\r\n      }\r\n\r\n      await checkAuthStatus(); // Refresh the auth status after login\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await fetch('https://localhost:7009/api/user/logout', {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n      });\r\n\r\n      setIsAuthenticated(false);\r\n      setUserInfo(null);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userInfo, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}