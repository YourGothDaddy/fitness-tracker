{"ast":null,"code":"import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { frameData } from './frame.mjs';\nlet now;\nfunction clearTime() {\n  now = undefined;\n}\n/**\r\n * An eventloop-synchronous alternative to performance.now().\r\n *\r\n * Ensures that time measurements remain consistent within a synchronous context.\r\n * Usually calling performance.now() twice within the same synchronous context\r\n * will return different values which isn't useful for animations when we're usually\r\n * trying to sync animations to the same frame.\r\n */\nconst time = {\n  now: () => {\n    if (now === undefined) {\n      time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now());\n    }\n    return now;\n  },\n  set: newTime => {\n    now = newTime;\n    queueMicrotask(clearTime);\n  }\n};\nexport { time };","map":{"version":3,"names":["MotionGlobalConfig","frameData","now","clearTime","undefined","time","set","isProcessing","useManualTiming","timestamp","performance","newTime","queueMicrotask"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/node_modules/framer-motion/dist/es/frameloop/sync-time.mjs"],"sourcesContent":["import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\r\nimport { frameData } from './frame.mjs';\r\n\r\nlet now;\r\nfunction clearTime() {\r\n    now = undefined;\r\n}\r\n/**\r\n * An eventloop-synchronous alternative to performance.now().\r\n *\r\n * Ensures that time measurements remain consistent within a synchronous context.\r\n * Usually calling performance.now() twice within the same synchronous context\r\n * will return different values which isn't useful for animations when we're usually\r\n * trying to sync animations to the same frame.\r\n */\r\nconst time = {\r\n    now: () => {\r\n        if (now === undefined) {\r\n            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming\r\n                ? frameData.timestamp\r\n                : performance.now());\r\n        }\r\n        return now;\r\n    },\r\n    set: (newTime) => {\r\n        now = newTime;\r\n        queueMicrotask(clearTime);\r\n    },\r\n};\r\n\r\nexport { time };\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,SAAS,QAAQ,aAAa;AAEvC,IAAIC,GAAG;AACP,SAASC,SAASA,CAAA,EAAG;EACjBD,GAAG,GAAGE,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG;EACTH,GAAG,EAAEA,CAAA,KAAM;IACP,IAAIA,GAAG,KAAKE,SAAS,EAAE;MACnBC,IAAI,CAACC,GAAG,CAACL,SAAS,CAACM,YAAY,IAAIP,kBAAkB,CAACQ,eAAe,GAC/DP,SAAS,CAACQ,SAAS,GACnBC,WAAW,CAACR,GAAG,CAAC,CAAC,CAAC;IAC5B;IACA,OAAOA,GAAG;EACd,CAAC;EACDI,GAAG,EAAGK,OAAO,IAAK;IACdT,GAAG,GAAGS,OAAO;IACbC,cAAc,CAACT,SAAS,CAAC;EAC7B;AACJ,CAAC;AAED,SAASE,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}