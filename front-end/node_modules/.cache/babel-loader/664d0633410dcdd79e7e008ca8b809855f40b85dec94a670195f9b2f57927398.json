{"ast":null,"code":"import { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\nimport { useLayoutEffect } from 'react';\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isArray = arr => Array.isArray(arr);\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  var _firstEntry$split$pop;\n  let loader = null;\n  let multiFile = false;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  const isCubemap = isArray(files) && files.length === 6;\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\n  const firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  multiFile = isArray(files);\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const gl = useThree(state => state.gl);\n  useLayoutEffect(() => {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      // @ts-expect-error\n      useLoader.clear(loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, multiFile ? [files] : files, loader => {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  let texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useThree","useLoader","CubeReflectionMapping","EquirectangularReflectionMapping","CubeTextureLoader","RGBELoader","EXRLoader","HDRJPGLoader","GainMapLoader","presetsObj","sRGBEncoding","LinearEncoding","useLayoutEffect","CUBEMAP_ROOT","isArray","arr","Array","useEnvironment","files","path","preset","undefined","encoding","extensions","_firstEntry$split$pop","loader","multiFile","Error","Object","keys","join","isCubemap","length","isGainmap","some","file","endsWith","firstEntry","extension","startsWith","split","pop","shift","toLowerCase","gl","state","clearGainmapTexture","clear","domElement","addEventListener","once","loaderResult","setRenderer","setPath","texture","_renderTarget","renderTarget","mapping","colorSpace"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\nimport { useLayoutEffect } from 'react';\n\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isArray = arr => Array.isArray(arr);\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  var _firstEntry$split$pop;\n  let loader = null;\n  let multiFile = false;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  const isCubemap = isArray(files) && files.length === 6;\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\n  const firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  multiFile = isArray(files);\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const gl = useThree(state => state.gl);\n  useLayoutEffect(() => {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      // @ts-expect-error\n      useLoader.clear(loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, multiFile ? [files] : files, loader => {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  let texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\n\nexport { useEnvironment };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}