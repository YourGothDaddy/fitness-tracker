{"ast":null,"code":"import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nclass SVGVisualElement extends DOMVisualElement {\n  constructor() {\n    super(...arguments);\n    this.type = \"svg\";\n    this.isSVGTag = false;\n    this.measureInstanceViewportBox = createBox;\n  }\n  getBaseTargetFromProps(props, key) {\n    return props[key];\n  }\n  readValueFromInstance(instance, key) {\n    if (transformProps.has(key)) {\n      const defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    }\n    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n    return instance.getAttribute(key);\n  }\n  scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n  }\n  build(renderState, latestValues, props) {\n    buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\n  }\n  renderInstance(instance, renderState, styleProp, projection) {\n    renderSVG(instance, renderState, styleProp, projection);\n  }\n  mount(instance) {\n    this.isSVGTag = isSVGTag(instance.tagName);\n    super.mount(instance);\n  }\n}\nexport { SVGVisualElement };","map":{"version":3,"names":["scrapeMotionValuesFromProps","DOMVisualElement","buildSVGAttrs","camelToDash","camelCaseAttributes","transformProps","renderSVG","getDefaultValueType","createBox","isSVGTag","SVGVisualElement","constructor","arguments","type","measureInstanceViewportBox","getBaseTargetFromProps","props","key","readValueFromInstance","instance","has","defaultType","default","getAttribute","prevProps","visualElement","build","renderState","latestValues","transformTemplate","renderInstance","styleProp","projection","mount","tagName"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs"],"sourcesContent":["import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\r\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\r\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\r\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\r\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\r\nimport { transformProps } from '../html/utils/transform.mjs';\r\nimport { renderSVG } from './utils/render.mjs';\r\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\r\nimport { createBox } from '../../projection/geometry/models.mjs';\r\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\r\n\r\nclass SVGVisualElement extends DOMVisualElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"svg\";\r\n        this.isSVGTag = false;\r\n        this.measureInstanceViewportBox = createBox;\r\n    }\r\n    getBaseTargetFromProps(props, key) {\r\n        return props[key];\r\n    }\r\n    readValueFromInstance(instance, key) {\r\n        if (transformProps.has(key)) {\r\n            const defaultType = getDefaultValueType(key);\r\n            return defaultType ? defaultType.default || 0 : 0;\r\n        }\r\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\r\n        return instance.getAttribute(key);\r\n    }\r\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\r\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\r\n    }\r\n    build(renderState, latestValues, props) {\r\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\r\n    }\r\n    renderInstance(instance, renderState, styleProp, projection) {\r\n        renderSVG(instance, renderState, styleProp, projection);\r\n    }\r\n    mount(instance) {\r\n        this.isSVGTag = isSVGTag(instance.tagName);\r\n        super.mount(instance);\r\n    }\r\n}\r\n\r\nexport { SVGVisualElement };\r\n"],"mappings":"AAAA,SAASA,2BAA2B,QAAQ,kCAAkC;AAC9E,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,mBAAmB,QAAQ,8BAA8B;AAClE,SAASC,cAAc,QAAQ,6BAA6B;AAC5D,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,SAAS,QAAQ,sCAAsC;AAChE,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,gBAAgB,SAAST,gBAAgB,CAAC;EAC5CU,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,IAAI,GAAG,KAAK;IACjB,IAAI,CAACJ,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACK,0BAA0B,GAAGN,SAAS;EAC/C;EACAO,sBAAsBA,CAACC,KAAK,EAAEC,GAAG,EAAE;IAC/B,OAAOD,KAAK,CAACC,GAAG,CAAC;EACrB;EACAC,qBAAqBA,CAACC,QAAQ,EAAEF,GAAG,EAAE;IACjC,IAAIZ,cAAc,CAACe,GAAG,CAACH,GAAG,CAAC,EAAE;MACzB,MAAMI,WAAW,GAAGd,mBAAmB,CAACU,GAAG,CAAC;MAC5C,OAAOI,WAAW,GAAGA,WAAW,CAACC,OAAO,IAAI,CAAC,GAAG,CAAC;IACrD;IACAL,GAAG,GAAG,CAACb,mBAAmB,CAACgB,GAAG,CAACH,GAAG,CAAC,GAAGd,WAAW,CAACc,GAAG,CAAC,GAAGA,GAAG;IAC5D,OAAOE,QAAQ,CAACI,YAAY,CAACN,GAAG,CAAC;EACrC;EACAjB,2BAA2BA,CAACgB,KAAK,EAAEQ,SAAS,EAAEC,aAAa,EAAE;IACzD,OAAOzB,2BAA2B,CAACgB,KAAK,EAAEQ,SAAS,EAAEC,aAAa,CAAC;EACvE;EACAC,KAAKA,CAACC,WAAW,EAAEC,YAAY,EAAEZ,KAAK,EAAE;IACpCd,aAAa,CAACyB,WAAW,EAAEC,YAAY,EAAE,IAAI,CAACnB,QAAQ,EAAEO,KAAK,CAACa,iBAAiB,CAAC;EACpF;EACAC,cAAcA,CAACX,QAAQ,EAAEQ,WAAW,EAAEI,SAAS,EAAEC,UAAU,EAAE;IACzD1B,SAAS,CAACa,QAAQ,EAAEQ,WAAW,EAAEI,SAAS,EAAEC,UAAU,CAAC;EAC3D;EACAC,KAAKA,CAACd,QAAQ,EAAE;IACZ,IAAI,CAACV,QAAQ,GAAGA,QAAQ,CAACU,QAAQ,CAACe,OAAO,CAAC;IAC1C,KAAK,CAACD,KAAK,CAACd,QAAQ,CAAC;EACzB;AACJ;AAEA,SAAST,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}