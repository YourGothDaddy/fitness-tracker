{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Clone } from './Clone.js';\nimport { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber';\nlet dracoLoader = null;\nlet decoderPath = 'https://www.gstatic.com/draco/versioned/decoders/1.5.5/';\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return loader => {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n    if (useDraco) {\n      if (!dracoLoader) {\n        dracoLoader = new DRACOLoader();\n      }\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : decoderPath);\n      loader.setDRACOLoader(dracoLoader);\n    }\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(typeof MeshoptDecoder === 'function' ? MeshoptDecoder() : MeshoptDecoder);\n    }\n  };\n}\nfunction useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {\n  return useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n}\nuseGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\nuseGLTF.clear = input => useLoader.clear(GLTFLoader, input);\nuseGLTF.setDecoderPath = path => {\n  decoderPath = path;\n};\n\n//\n\nconst Gltf = /* @__PURE__ */React.forwardRef(({\n  src,\n  useDraco,\n  useMeshOpt,\n  extendLoader,\n  ...props\n}, ref) => {\n  const {\n    scene\n  } = useGLTF(src, useDraco, useMeshOpt, extendLoader);\n  return /*#__PURE__*/React.createElement(Clone, _extends({\n    ref: ref\n  }, props, {\n    object: scene\n  }));\n});\nexport { Gltf, useGLTF };","map":{"version":3,"names":["_extends","React","Clone","GLTFLoader","DRACOLoader","MeshoptDecoder","useLoader","dracoLoader","decoderPath","extensions","useDraco","useMeshopt","extendLoader","loader","setDecoderPath","setDRACOLoader","setMeshoptDecoder","useGLTF","path","useMeshOpt","preload","clear","input","Gltf","forwardRef","src","props","ref","scene","createElement","object"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/node_modules/@react-three/drei/core/Gltf.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Clone } from './Clone.js';\nimport { GLTFLoader, DRACOLoader, MeshoptDecoder } from 'three-stdlib';\nimport { useLoader } from '@react-three/fiber';\n\nlet dracoLoader = null;\nlet decoderPath = 'https://www.gstatic.com/draco/versioned/decoders/1.5.5/';\nfunction extensions(useDraco, useMeshopt, extendLoader) {\n  return loader => {\n    if (extendLoader) {\n      extendLoader(loader);\n    }\n    if (useDraco) {\n      if (!dracoLoader) {\n        dracoLoader = new DRACOLoader();\n      }\n      dracoLoader.setDecoderPath(typeof useDraco === 'string' ? useDraco : decoderPath);\n      loader.setDRACOLoader(dracoLoader);\n    }\n    if (useMeshopt) {\n      loader.setMeshoptDecoder(typeof MeshoptDecoder === 'function' ? MeshoptDecoder() : MeshoptDecoder);\n    }\n  };\n}\nfunction useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {\n  return useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\n}\nuseGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));\nuseGLTF.clear = input => useLoader.clear(GLTFLoader, input);\nuseGLTF.setDecoderPath = path => {\n  decoderPath = path;\n};\n\n//\n\nconst Gltf = /* @__PURE__ */React.forwardRef(({\n  src,\n  useDraco,\n  useMeshOpt,\n  extendLoader,\n  ...props\n}, ref) => {\n  const {\n    scene\n  } = useGLTF(src, useDraco, useMeshOpt, extendLoader);\n  return /*#__PURE__*/React.createElement(Clone, _extends({\n    ref: ref\n  }, props, {\n    object: scene\n  }));\n});\n\nexport { Gltf, useGLTF };\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,UAAU,EAAEC,WAAW,EAAEC,cAAc,QAAQ,cAAc;AACtE,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,IAAIC,WAAW,GAAG,IAAI;AACtB,IAAIC,WAAW,GAAG,yDAAyD;AAC3E,SAASC,UAAUA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,YAAY,EAAE;EACtD,OAAOC,MAAM,IAAI;IACf,IAAID,YAAY,EAAE;MAChBA,YAAY,CAACC,MAAM,CAAC;IACtB;IACA,IAAIH,QAAQ,EAAE;MACZ,IAAI,CAACH,WAAW,EAAE;QAChBA,WAAW,GAAG,IAAIH,WAAW,CAAC,CAAC;MACjC;MACAG,WAAW,CAACO,cAAc,CAAC,OAAOJ,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAGF,WAAW,CAAC;MACjFK,MAAM,CAACE,cAAc,CAACR,WAAW,CAAC;IACpC;IACA,IAAII,UAAU,EAAE;MACdE,MAAM,CAACG,iBAAiB,CAAC,OAAOX,cAAc,KAAK,UAAU,GAAGA,cAAc,CAAC,CAAC,GAAGA,cAAc,CAAC;IACpG;EACF,CAAC;AACH;AACA,SAASY,OAAOA,CAACC,IAAI,EAAER,QAAQ,GAAG,IAAI,EAAES,UAAU,GAAG,IAAI,EAAEP,YAAY,EAAE;EACvE,OAAON,SAAS,CAACH,UAAU,EAAEe,IAAI,EAAET,UAAU,CAACC,QAAQ,EAAES,UAAU,EAAEP,YAAY,CAAC,CAAC;AACpF;AACAK,OAAO,CAACG,OAAO,GAAG,CAACF,IAAI,EAAER,QAAQ,GAAG,IAAI,EAAES,UAAU,GAAG,IAAI,EAAEP,YAAY,KAAKN,SAAS,CAACc,OAAO,CAACjB,UAAU,EAAEe,IAAI,EAAET,UAAU,CAACC,QAAQ,EAAES,UAAU,EAAEP,YAAY,CAAC,CAAC;AACjKK,OAAO,CAACI,KAAK,GAAGC,KAAK,IAAIhB,SAAS,CAACe,KAAK,CAAClB,UAAU,EAAEmB,KAAK,CAAC;AAC3DL,OAAO,CAACH,cAAc,GAAGI,IAAI,IAAI;EAC/BV,WAAW,GAAGU,IAAI;AACpB,CAAC;;AAED;;AAEA,MAAMK,IAAI,GAAG,eAAetB,KAAK,CAACuB,UAAU,CAAC,CAAC;EAC5CC,GAAG;EACHf,QAAQ;EACRS,UAAU;EACVP,YAAY;EACZ,GAAGc;AACL,CAAC,EAAEC,GAAG,KAAK;EACT,MAAM;IACJC;EACF,CAAC,GAAGX,OAAO,CAACQ,GAAG,EAAEf,QAAQ,EAAES,UAAU,EAAEP,YAAY,CAAC;EACpD,OAAO,aAAaX,KAAK,CAAC4B,aAAa,CAAC3B,KAAK,EAAEF,QAAQ,CAAC;IACtD2B,GAAG,EAAEA;EACP,CAAC,EAAED,KAAK,EAAE;IACRI,MAAM,EAAEF;EACV,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,SAASL,IAAI,EAAEN,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}