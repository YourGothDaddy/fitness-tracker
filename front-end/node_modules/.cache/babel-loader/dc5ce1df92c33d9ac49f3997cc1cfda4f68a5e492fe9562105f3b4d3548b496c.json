{"ast":null,"code":"var _jsxFileName = \"C:\\\\Alexander\\\\Software Developement\\\\repos\\\\Web2\\\\Fitness-Tracker\\\\front-end\\\\src\\\\components\\\\Pages\\\\DashboardPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport InfoCard from '../InfoCard.js';\nimport AddMealForm from '../Forms/AddMealForm.js';\nimport AllMealsPage from '../Pages/AllMealsPage.js';\nimport '../../css/DashboardPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const [userDataAndGoals, setUserDataAndGoals] = useState({\n    dailyCalories: 0,\n    monthlyCalories: 0,\n    currentWeight: 0,\n    goalWeight: 0,\n    height: 0,\n    isDailyCaloriesGoal: true\n  });\n  const [calories, setCalories] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  useEffect(() => {\n    fetchUserDataAndGoals();\n    fetchCalories();\n  }, []);\n  const fetchUserDataAndGoals = async () => {\n    try {\n      const data = await fetchData(`https://localhost:7009/api/user/goals`);\n      setUserDataAndGoals({\n        dailyCalories: data.dailyCaloriesGoal || 0,\n        monthlyCalories: data.monthlyCaloriesGoal || 0,\n        currentWeight: data.weight || 0,\n        goalWeight: data.goalWeight || 0,\n        height: data.height || 0,\n        isDailyCaloriesGoal: data.isDailyCaloriesGoal\n      });\n      setErrorMessage('');\n    } catch (err) {\n      setErrorMessage(err.message);\n    }\n  };\n  const fetchCalories = async () => {\n    try {\n      const data = await fetchData(`https://localhost:7009/api/meal/calories?date=${formatDate(new Date())}`);\n      setCalories(data);\n      setErrorMessage('');\n    } catch (err) {\n      setErrorMessage(err.message);\n    }\n  };\n  const fetchData = async url => {\n    const response = await fetch(url, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Fetching data failed');\n    }\n    return response.json();\n  };\n  const formatDate = date => {\n    return date.toISOString().split('T')[0];\n  };\n  const handleAddButtonClick = () => {\n    setIsFormVisible(true);\n  };\n  const handleFormClose = () => {\n    setIsFormVisible(false);\n  };\n  const {\n    dailyCalories,\n    monthlyCalories,\n    currentWeight,\n    goalWeight,\n    height\n  } = userDataAndGoals;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `dashboard-page ${isFormVisible ? 'overlay' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-button\",\n      onClick: handleAddButtonClick,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), isFormVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-modal\",\n      onClick: handleFormClose,\n      children: /*#__PURE__*/_jsxDEV(AddMealForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upper-section\",\n      children: /*#__PURE__*/_jsxDEV(AllMealsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-section\",\n        children: /*#__PURE__*/_jsxDEV(InfoCard, {\n          title: \"Calories Consumed Today\",\n          current: calories,\n          goal: dailyCalories,\n          unit: \"kcal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-section\",\n        children: /*#__PURE__*/_jsxDEV(InfoCard, {\n          title: \"Current Weight\",\n          current: currentWeight,\n          goal: goalWeight,\n          unit: \"kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(DashboardPage, \"UuHOOCD4J3rd2lD7Jv4QrvnswFc=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useState","useEffect","InfoCard","AddMealForm","AllMealsPage","jsxDEV","_jsxDEV","DashboardPage","_s","userDataAndGoals","setUserDataAndGoals","dailyCalories","monthlyCalories","currentWeight","goalWeight","height","isDailyCaloriesGoal","calories","setCalories","errorMessage","setErrorMessage","isFormVisible","setIsFormVisible","fetchUserDataAndGoals","fetchCalories","data","fetchData","dailyCaloriesGoal","monthlyCaloriesGoal","weight","err","message","formatDate","Date","url","response","fetch","method","credentials","headers","ok","Error","json","date","toISOString","split","handleAddButtonClick","handleFormClose","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","title","current","goal","unit","_c","$RefreshReg$"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/src/components/Pages/DashboardPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport InfoCard from '../InfoCard.js';\r\nimport AddMealForm from '../Forms/AddMealForm.js';\r\nimport AllMealsPage from '../Pages/AllMealsPage.js';\r\nimport '../../css/DashboardPage.css';\r\n\r\nconst DashboardPage = () => {\r\n    const [userDataAndGoals, setUserDataAndGoals] = useState({\r\n        dailyCalories: 0,\r\n        monthlyCalories: 0,\r\n        currentWeight: 0,\r\n        goalWeight: 0,\r\n        height: 0,\r\n        isDailyCaloriesGoal: true,\r\n    });\r\n    const [calories, setCalories] = useState(0);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [isFormVisible, setIsFormVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchUserDataAndGoals();\r\n        fetchCalories();\r\n    }, []);\r\n\r\n    const fetchUserDataAndGoals = async () => {\r\n        try {\r\n            const data = await fetchData(`https://localhost:7009/api/user/goals`);\r\n            setUserDataAndGoals({\r\n                dailyCalories: data.dailyCaloriesGoal || 0,\r\n                monthlyCalories: data.monthlyCaloriesGoal || 0,\r\n                currentWeight: data.weight || 0,\r\n                goalWeight: data.goalWeight || 0,\r\n                height: data.height || 0,\r\n                isDailyCaloriesGoal: data.isDailyCaloriesGoal,\r\n            });\r\n            setErrorMessage('');\r\n        } catch (err) {\r\n            setErrorMessage(err.message);\r\n        }\r\n    };\r\n\r\n    const fetchCalories = async () => {\r\n        try {\r\n            const data = await fetchData(`https://localhost:7009/api/meal/calories?date=${formatDate(new Date())}`);\r\n            setCalories(data);\r\n            setErrorMessage('');\r\n        } catch (err) {\r\n            setErrorMessage(err.message);\r\n        }\r\n    };\r\n\r\n    const fetchData = async (url) => {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Fetching data failed');\r\n        }\r\n\r\n        return response.json();\r\n    };\r\n\r\n    const formatDate = (date) => {\r\n        return date.toISOString().split('T')[0];\r\n    };\r\n\r\n    const handleAddButtonClick = () => {\r\n        setIsFormVisible(true);\r\n    };\r\n\r\n    const handleFormClose = () => {\r\n        setIsFormVisible(false);\r\n    };\r\n\r\n    const {\r\n        dailyCalories,\r\n        monthlyCalories,\r\n        currentWeight,\r\n        goalWeight,\r\n        height,\r\n    } = userDataAndGoals;\r\n\r\n    return (\r\n        <div className={`dashboard-page ${isFormVisible ? 'overlay' : ''}`}>\r\n            <button className=\"add-button\" onClick={handleAddButtonClick}>Add</button>\r\n            {isFormVisible && (\r\n                <div className=\"form-modal\" onClick={handleFormClose}>\r\n                    <AddMealForm />\r\n                </div>\r\n            )}\r\n            <div className=\"upper-section\">\r\n                <AllMealsPage />\r\n            </div>\r\n            <div className=\"main-content\">\r\n                <div className=\"left-section\">\r\n                    <InfoCard\r\n                        title=\"Calories Consumed Today\"\r\n                        current={calories}\r\n                        goal={dailyCalories}\r\n                        unit=\"kcal\"\r\n                    />\r\n                    {/* Add more InfoCards here for scalability */}\r\n                </div>\r\n                <div className=\"right-section\">\r\n                    <InfoCard\r\n                        title=\"Current Weight\"\r\n                        current={currentWeight}\r\n                        goal={goalWeight}\r\n                        unit=\"kg\"\r\n                    />\r\n                    {/* Add more InfoCards here for scalability */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC;IACrDW,aAAa,EAAE,CAAC;IAChBC,eAAe,EAAE,CAAC;IAClBC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE,CAAC;IACbC,MAAM,EAAE,CAAC;IACTC,mBAAmB,EAAE;EACzB,CAAC,CAAC;EACF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAEzDC,SAAS,CAAC,MAAM;IACZsB,qBAAqB,CAAC,CAAC;IACvBC,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACA,MAAME,IAAI,GAAG,MAAMC,SAAS,CAAC,uCAAuC,CAAC;MACrEhB,mBAAmB,CAAC;QAChBC,aAAa,EAAEc,IAAI,CAACE,iBAAiB,IAAI,CAAC;QAC1Cf,eAAe,EAAEa,IAAI,CAACG,mBAAmB,IAAI,CAAC;QAC9Cf,aAAa,EAAEY,IAAI,CAACI,MAAM,IAAI,CAAC;QAC/Bf,UAAU,EAAEW,IAAI,CAACX,UAAU,IAAI,CAAC;QAChCC,MAAM,EAAEU,IAAI,CAACV,MAAM,IAAI,CAAC;QACxBC,mBAAmB,EAAES,IAAI,CAACT;MAC9B,CAAC,CAAC;MACFI,eAAe,CAAC,EAAE,CAAC;IACvB,CAAC,CAAC,OAAOU,GAAG,EAAE;MACVV,eAAe,CAACU,GAAG,CAACC,OAAO,CAAC;IAChC;EACJ,CAAC;EAED,MAAMP,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,IAAI,GAAG,MAAMC,SAAS,CAAC,iDAAiDM,UAAU,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;MACvGf,WAAW,CAACO,IAAI,CAAC;MACjBL,eAAe,CAAC,EAAE,CAAC;IACvB,CAAC,CAAC,OAAOU,GAAG,EAAE;MACVV,eAAe,CAACU,GAAG,CAACC,OAAO,CAAC;IAChC;EACJ,CAAC;EAED,MAAML,SAAS,GAAG,MAAOQ,GAAG,IAAK;IAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC9BG,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE,SAAS;MACtBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IAEA,OAAON,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMV,UAAU,GAAIW,IAAI,IAAK;IACzB,OAAOA,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/BxB,gBAAgB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMyB,eAAe,GAAGA,CAAA,KAAM;IAC1BzB,gBAAgB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAM;IACFX,aAAa;IACbC,eAAe;IACfC,aAAa;IACbC,UAAU;IACVC;EACJ,CAAC,GAAGN,gBAAgB;EAEpB,oBACIH,OAAA;IAAK0C,SAAS,EAAE,kBAAkB3B,aAAa,GAAG,SAAS,GAAG,EAAE,EAAG;IAAA4B,QAAA,gBAC/D3C,OAAA;MAAQ0C,SAAS,EAAC,YAAY;MAACE,OAAO,EAAEJ,oBAAqB;MAAAG,QAAA,EAAC;IAAG;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzEjC,aAAa,iBACVf,OAAA;MAAK0C,SAAS,EAAC,YAAY;MAACE,OAAO,EAAEH,eAAgB;MAAAE,QAAA,eACjD3C,OAAA,CAACH,WAAW;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CACR,eACDhD,OAAA;MAAK0C,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC1B3C,OAAA,CAACF,YAAY;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC,eACNhD,OAAA;MAAK0C,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzB3C,OAAA;QAAK0C,SAAS,EAAC,cAAc;QAAAC,QAAA,eACzB3C,OAAA,CAACJ,QAAQ;UACLqD,KAAK,EAAC,yBAAyB;UAC/BC,OAAO,EAAEvC,QAAS;UAClBwC,IAAI,EAAE9C,aAAc;UACpB+C,IAAI,EAAC;QAAM;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAED,CAAC,eACNhD,OAAA;QAAK0C,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC1B3C,OAAA,CAACJ,QAAQ;UACLqD,KAAK,EAAC,gBAAgB;UACtBC,OAAO,EAAE3C,aAAc;UACvB4C,IAAI,EAAE3C,UAAW;UACjB4C,IAAI,EAAC;QAAI;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAED,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC9C,EAAA,CAlHID,aAAa;AAAAoD,EAAA,GAAbpD,aAAa;AAoHnB,eAAeA,aAAa;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}