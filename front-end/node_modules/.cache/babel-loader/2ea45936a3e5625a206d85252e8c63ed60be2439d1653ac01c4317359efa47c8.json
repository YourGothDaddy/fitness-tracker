{"ast":null,"code":"var _jsxFileName = \"C:\\\\Alexander\\\\Software Developement\\\\repos\\\\Web2\\\\Fitness-Tracker\\\\front-end\\\\src\\\\components\\\\Forms\\\\AddActivityTypeForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport CustomForm from \"../CustomForm.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddActivityTypeForm = () => {\n  _s();\n  const [activityType, setActivityType] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    setErrorMessage(\"\");\n    setSuccessMessage(\"\");\n    // try {\n    //   const response = await fetch(\n    //     \"https://localhost:7009/api/admin/add-activity-type\",\n    //     {\n    //       method: \"POST\",\n    //       credentials: \"include\",\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //       body: JSON.stringify(activityType),\n    //     }\n    //   );\n\n    //   if (!response.ok) {\n    //     throw new Error(\"Adding an activity type failed!\");\n    //   }\n    try {\n      console.log(`Activity type is set to ${activityType}`);\n      setSuccessMessage(\"Activity type has been added successfully!\");\n      resetForm();\n    } catch (err) {\n      setErrorMessage(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleChange = e => {\n    setActivityType(e.target.value);\n  };\n  const resetForm = () => {\n    setActivityType(\"\");\n  };\n  const formOptions = [{\n    title: \"Activity Type Name\",\n    type: \"text\",\n    value: activityType,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    isRequired: true,\n    placeholder: \"Enter activity type name\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CustomForm, {\n      handleSubmit: handleSubmit,\n      formOptions: formOptions,\n      isLoading: isLoading,\n      buttonText: \"Add activity type\",\n      successMessage: successMessage,\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(AddActivityTypeForm, \"X954W8TpXDnHPxzQCKeKDBVmvQQ=\");\n_c = AddActivityTypeForm;\nexport default AddActivityTypeForm;\nvar _c;\n$RefreshReg$(_c, \"AddActivityTypeForm\");","map":{"version":3,"names":["React","useState","Alert","CustomForm","jsxDEV","_jsxDEV","Fragment","_Fragment","AddActivityTypeForm","_s","activityType","setActivityType","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isLoading","setIsLoading","handleSubmit","e","preventDefault","console","log","resetForm","err","message","handleChange","target","value","formOptions","title","type","isRequired","placeholder","children","buttonText","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/src/components/Forms/AddActivityTypeForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport CustomForm from \"../CustomForm.js\";\r\n\r\nconst AddActivityTypeForm = () => {\r\n  const [activityType, setActivityType] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErrorMessage(\"\");\r\n    setSuccessMessage(\"\");\r\n    // try {\r\n    //   const response = await fetch(\r\n    //     \"https://localhost:7009/api/admin/add-activity-type\",\r\n    //     {\r\n    //       method: \"POST\",\r\n    //       credentials: \"include\",\r\n    //       headers: {\r\n    //         \"Content-Type\": \"application/json\",\r\n    //       },\r\n    //       body: JSON.stringify(activityType),\r\n    //     }\r\n    //   );\r\n\r\n    //   if (!response.ok) {\r\n    //     throw new Error(\"Adding an activity type failed!\");\r\n    //   }\r\n    try {\r\n      console.log(`Activity type is set to ${activityType}`);\r\n      setSuccessMessage(\"Activity type has been added successfully!\");\r\n      resetForm();\r\n    } catch (err) {\r\n      setErrorMessage(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setActivityType(e.target.value);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setActivityType(\"\");\r\n  };\r\n\r\n  const formOptions = [\r\n    {\r\n      title: \"Activity Type Name\",\r\n      type: \"text\",\r\n      value: activityType,\r\n      handleChange: handleChange,\r\n      handleSubmit: handleSubmit,\r\n      isRequired: true,\r\n      placeholder: \"Enter activity type name\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <CustomForm\r\n        handleSubmit={handleSubmit}\r\n        formOptions={formOptions}\r\n        isLoading={isLoading}\r\n        buttonText=\"Add activity type\"\r\n        successMessage={successMessage}\r\n        errorMessage={errorMessage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddActivityTypeForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMiB,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBH,YAAY,CAAC,IAAI,CAAC;IAClBJ,eAAe,CAAC,EAAE,CAAC;IACnBE,iBAAiB,CAAC,EAAE,CAAC;IACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA,IAAI;MACFM,OAAO,CAACC,GAAG,CAAC,2BAA2BZ,YAAY,EAAE,CAAC;MACtDK,iBAAiB,CAAC,4CAA4C,CAAC;MAC/DQ,SAAS,CAAC,CAAC;IACb,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZX,eAAe,CAACW,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMS,YAAY,GAAIP,CAAC,IAAK;IAC1BR,eAAe,CAACQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EAED,MAAML,SAAS,GAAGA,CAAA,KAAM;IACtBZ,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,MAAMkB,WAAW,GAAG,CAClB;IACEC,KAAK,EAAE,oBAAoB;IAC3BC,IAAI,EAAE,MAAM;IACZH,KAAK,EAAElB,YAAY;IACnBgB,YAAY,EAAEA,YAAY;IAC1BR,YAAY,EAAEA,YAAY;IAC1Bc,UAAU,EAAE,IAAI;IAChBC,WAAW,EAAE;EACf,CAAC,CACF;EAED,oBACE5B,OAAA,CAAAE,SAAA;IAAA2B,QAAA,eACE7B,OAAA,CAACF,UAAU;MACTe,YAAY,EAAEA,YAAa;MAC3BW,WAAW,EAAEA,WAAY;MACzBb,SAAS,EAAEA,SAAU;MACrBmB,UAAU,EAAC,mBAAmB;MAC9BrB,cAAc,EAAEA,cAAe;MAC/BF,YAAY,EAAEA;IAAa;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B;EAAC,gBACF,CAAC;AAEP,CAAC;AAAC9B,EAAA,CAvEID,mBAAmB;AAAAgC,EAAA,GAAnBhC,mBAAmB;AAyEzB,eAAeA,mBAAmB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}