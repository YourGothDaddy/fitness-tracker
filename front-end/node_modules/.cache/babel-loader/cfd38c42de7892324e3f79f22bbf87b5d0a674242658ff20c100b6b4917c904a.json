{"ast":null,"code":"var _jsxFileName = \"C:\\\\Alexander\\\\Software Developement\\\\repos\\\\Web2\\\\Fitness-Tracker\\\\front-end\\\\src\\\\Contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst API_BASE_URL = \"https://localhost:7009/api/user\";\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, setAuthState] = useState({\n    isAuthenticated: null,\n    userInfo: null,\n    isAdmin: false\n  });\n  const checkAuthStatus = useCallback(async () => {\n    try {\n      var _user$roles;\n      const response = await fetch(`${API_BASE_URL}/authstatus`, {\n        method: \"GET\",\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        throw new Error(\"User is not authenticated\");\n      }\n      const user = await response.json();\n      setAuthState({\n        isAuthenticated: true,\n        userInfo: user,\n        isAdmin: ((_user$roles = user.roles) === null || _user$roles === void 0 ? void 0 : _user$roles.includes(\"Administrator\")) || false\n      });\n    } catch (err) {\n      setAuthState({\n        isAuthenticated: false,\n        userInfo: null,\n        isAdmin: false\n      });\n    }\n  }, []);\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          Email: email,\n          Password: password\n        }),\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        throw new Error(\"Login failed\");\n      }\n      await checkAuthStatus();\n    } catch (err) {\n      setAuthState({\n        isAuthenticated: false,\n        userInfo: null,\n        isAdmin: false\n      });\n    }\n  };\n  const logout = async () => {\n    try {\n      await fetch(`${API_BASE_URL}/logout`, {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n      setAuthState({\n        isAuthenticated: false,\n        userInfo: null,\n        isAdmin: false\n      });\n    } catch (err) {\n      console.error(\"Logout failed:\", err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      ...authState,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"T/dhwUQu0E9OQrrmkFye6nqgFSI=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","AuthProvider","children","_s","authState","setAuthState","isAuthenticated","userInfo","isAdmin","checkAuthStatus","_user$roles","response","fetch","method","credentials","ok","Error","user","json","roles","includes","err","login","email","password","headers","body","JSON","stringify","Email","Password","logout","console","error","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Alexander/Software Developement/repos/Web2/Fitness-Tracker/front-end/src/Contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst API_BASE_URL = \"https://localhost:7009/api/user\";\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const [authState, setAuthState] = useState({\r\n    isAuthenticated: null,\r\n    userInfo: null,\r\n    isAdmin: false,\r\n  });\r\n\r\n  const checkAuthStatus = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/authstatus`, {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"User is not authenticated\");\r\n      }\r\n\r\n      const user = await response.json();\r\n      setAuthState({\r\n        isAuthenticated: true,\r\n        userInfo: user,\r\n        isAdmin: user.roles?.includes(\"Administrator\") || false,\r\n      });\r\n    } catch (err) {\r\n      setAuthState({ isAuthenticated: false, userInfo: null, isAdmin: false });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, [checkAuthStatus]);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/login`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ Email: email, Password: password }),\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Login failed\");\r\n      }\r\n\r\n      await checkAuthStatus();\r\n    } catch (err) {\r\n      setAuthState({ isAuthenticated: false, userInfo: null, isAdmin: false });\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await fetch(`${API_BASE_URL}/logout`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n      });\r\n      setAuthState({ isAuthenticated: false, userInfo: null, isAdmin: false });\r\n    } catch (err) {\r\n      console.error(\"Logout failed:\", err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ ...authState, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}